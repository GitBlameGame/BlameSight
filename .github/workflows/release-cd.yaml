name: Release CD

on:
  workflow_call: 
  workflow_dispatch:

permissions:
  contents: write
  security-events: write
  id-token: write

jobs:
  cli-release:
    name: CLI Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
        aws-region: "eu-west-1"
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
    
    - name: Get API Endpoint
      run: |
        echo "API_ENDPOINT=$(aws elasticbeanstalk describe-environments --environment-names api-env --query "Environments[*].CNAME" --output text)" >> $GITHUB_ENV
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Create self-contained releases
      working-directory: ./Frontend/BlameSightFrontend
      run: |
        dotnet publish -r win-x64 -p:PublishSingleFile=true --self-contained true -c Release
        dotnet publish -r linux-x64 -p:PublishSingleFile=true --self-contained true -c Release
        dotnet publish -r osx-x64 -p:PublishSingleFile=true --self-contained true -c Release
        zip -r -j cli-windows-x64.zip ./BlameSightFrontend/bin/Release/net8.0/win-x64/publish/*
        zip -r -j cli-linux-x64.zip ./BlameSightFrontend/bin/Release/net8.0/linux-x64/publish/*
        zip -r -j cli-osx-x64.zip ./BlameSightFrontend/bin/Release/net8.0/osx-x64/publish/*
    
    - uses: cb80/delrel@latest
      with:
        tag: latest
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GH Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: latest
        release_name: cli
        body: |
          Packaged CLI
        draft: false
        prerelease: false

    - name: Upload release asset (Windows)
      id: upload-release-asset-win 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Frontend/BlameSightFrontend/cli-windows-x64.zip
        asset_name: cli-windows-x64.zip
        asset_content_type: application/zip

    - name: Upload release asset (Linux)
      id: upload-release-asset-linux 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Frontend/BlameSightFrontend/cli-linux-x64.zip
        asset_name: cli-linux-x64.zip
        asset_content_type: application/zip

    - name: Upload release asset (osx)
      id: upload-release-asset-osx 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Frontend/BlameSightFrontend/cli-osx-x64.zip
        asset_name: cli-osx-x64.zip
        asset_content_type: application/zip


  api-deploy:
    name: API Deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{secrets.AWS_ASSUME_ROLE}}
        aws-region: "eu-west-1"
        role-session-name: GitHub_to_AWS_via_FederatedOIDC

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Publish API
      working-directory: ./Backend/BlameSightBackend
      run: dotnet publish -c Release --output ../../bundle/api/api

    - name: Create ZIP Package
      working-directory: ./bundle/api
      run: |
        zip -r deploy_package.zip .

    - name: Upload API Package
      working-directory: ./bundle/api
      run: aws s3 cp deploy_package.zip s3://263883060207-deploy-bucket

    - name: Create New API Version
      run: aws elasticbeanstalk create-application-version --application-name api-app --source-bundle S3Bucket="263883060207-deploy-bucket",S3Key="deploy_package.zip" --version-label "deploy-${{ github.sha }}" --description "commit-sha-${{ github.sha }}"

    - name: Deploy API
      run: aws elasticbeanstalk update-environment --environment-name api-env --version-label "deploy-${{ github.sha }}"


  bot-deploy:
    name: Bot Deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{secrets.AWS_ASSUME_ROLE}}
        aws-region: "eu-west-1"
        role-session-name: GitHub_to_AWS_via_FederatedOIDC

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Publish API
      working-directory: ./Backend/DiscordBot
      run: dotnet publish -c Release --output ../../bundle/bot/bot

    - name: Create ZIP Package
      working-directory: ./bundle/bot
      run: |
        zip -r deploy_package.zip .

    - name: Upload Bot Package
      working-directory: ./bundle/bot
      run: aws s3 cp deploy_package.zip s3://263883060207-deploy-bucket-bot

    - name: Create New Bot Version
      run: aws elasticbeanstalk create-application-version --application-name bot-app --source-bundle S3Bucket="263883060207-deploy-bucket-bot",S3Key="deploy_package.zip" --version-label "deploy-${{ github.sha }}" --description "commit-sha-${{ github.sha }}"

    - name: Deploy Bot
      run: aws elasticbeanstalk update-environment --environment-name bot-env --version-label "deploy-${{ github.sha }}"