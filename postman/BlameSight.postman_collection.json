{
	"info": {
		"_postman_id": "3ae47c75-52ab-41cb-96ed-b53f9a8582cc",
		"name": "BlameSight",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33958870"
	},
	"item": [
		{
			"name": "BlameShame",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - name and blamePoints\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"\r",
							"    responseData.forEach(item => {\r",
							"        pm.expect(item).to.have.property('name');\r",
							"        pm.expect(item).to.have.property('blamePoints');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  \r",
							"  responseData.forEach(function(item){\r",
							"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"BlamePoints is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.blamePoints).to.be.a('number').and.to.satisfy((num) => num >= 0, \"BlamePoints should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{AWSURL}}/api/Blames/blameShame",
					"host": [
						"{{AWSURL}}"
					],
					"path": [
						"api",
						"Blames",
						"blameShame"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"pm.test(\"Response is a valid JWT\", function () {\r",
							"    var jwt = pm.response.text(); // Adjust this if your JWT is returned under a different property name\r",
							"    var parts = jwt.split('.');\r",
							"    \r",
							"    pm.expect(parts.length).to.equal(3); // JWT should have 3 parts\r",
							"    \r",
							"    var header = JSON.parse(atob(parts[0]));\r",
							"    var payload = JSON.parse(atob(parts[1]));\r",
							"    \r",
							"    // Check that the header contains typical JWT properties\r",
							"    pm.expect(header).to.have.property('alg');\r",
							"    pm.expect(header).to.have.property('typ', 'JWT');\r",
							"    pm.expect(payload).to.have.property('Name');\r",
							"    pm.expect(payload).to.have.property('Token');\r",
							"    \r",
							"    // Add more checks as needed for your specific JWT structure\r",
							"});\r",
							"pm.test(\"Set token as an environment variable\", function () {\r",
							"    var jsonData =pm.response.text();\r",
							"    pm.environment.set(\"token\", jsonData);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{GithubDEVTOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{AWSURL}}/api/Login",
					"host": [
						"{{AWSURL}}"
					],
					"path": [
						"api",
						"Login"
					]
				}
			},
			"response": []
		},
		{
			"name": "View where i am blamed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"BlameViewed and BlameComplete are boolean values\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    responseData.forEach(function(blame) {\r",
							"        pm.expect(blame.blameViewed).to.be.a('boolean');\r",
							"        pm.expect(blame.blameComplete).to.be.a('boolean');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"LineNum is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.lineNum).to.be.a('number').and.to.satisfy((num) => num >= 0, \"LineNum must be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{AWSURL}}/api/Blames/openBlames",
					"host": [
						"{{AWSURL}}"
					],
					"path": [
						"api",
						"Blames",
						"openBlames"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Blame",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"pm.test(\"Body is a string and contains 'blame'\", function () {\r",
							"    pm.expect(typeof pm.response.text()).to.eql('string'); // Check if the response is a string\r",
							"    pm.expect(pm.response.text()).to.include('blame'); // Check if the word \"blame\" is in the response\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"Path\": \"GitBlameGame/BlameSight/Backend/BlameSightBackend/BlameSightBackend/Utils/JWTUtils.cs\",\r\n  \"Comment\": \"Why tab spaces?\",\r\n  \"Urgency\" : 2,\r\n  \"lineNum\" : 3,\r\n  \"branch\" : \"main\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{AWSURL}}/api/Blames/newBlame",
					"host": [
						"{{AWSURL}}"
					],
					"path": [
						"api",
						"Blames",
						"newBlame"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if blame was made",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"pm.test(\"Check if blame was created\", function () {\r",
							"    var responseBody = pm.response.json();\r",
							"    \r",
							"    // Flag to indicate if the object is found\r",
							"    var isObjectFound = false;\r",
							"    \r",
							"    // Iterate over each object in the response array\r",
							"    responseBody.forEach(function (item) {\r",
							"        if (item.path === \"GitBlameGame/BlameSight/main/Backend/BlameSightBackend/BlameSightBackend/Controllers/HealthCheck.cs\" &&\r",
							"            item.comment === \"TESTPOSTMAN\" &&\r",
							"            item.lineNum === 3) {\r",
							"            isObjectFound = true;\r",
							"        }\r",
							"    });\r",
							"    \r",
							"    // Check if the object was found\r",
							"    pm.expect(isObjectFound).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"Path\": \"GitBlameGame/BlameSight/Backend/BlameSightBackend/BlameSightBackend/Utils/JWTUtils.cs\",\r\n  \"Comment\": \"Why tab spaces?\",\r\n  \"Urgency\" : 2,\r\n  \"lineNum\" : 3,\r\n  \"branch\" : \"main\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{AWSURL}}/api/Blames/Myblames",
					"host": [
						"{{AWSURL}}"
					],
					"path": [
						"api",
						"Blames",
						"Myblames"
					]
				}
			},
			"response": []
		},
		{
			"name": "Begon Blame",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"pm.test(\"Response body contains 'Blame successfully closedðŸ˜Š'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Blame successfully closedðŸ˜Š\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"Path\": \"GitBlameGame/BlameSight/Backend/BlameSightBackend/BlameSightBackend/Utils/JWTUtils.cs\",\r\n  \"Comment\": \"Why tab spaces?\",\r\n  \"Urgency\" : 2,\r\n  \"lineNum\" : 3,\r\n  \"branch\" : \"main\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{AWSURL}}/api/Blames/blameBegone/{{savedId}}",
					"host": [
						"{{AWSURL}}"
					],
					"path": [
						"api",
						"Blames",
						"blameBegone",
						"{{savedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"pm.test(\"Response body contains 'Blame successfully closedðŸ˜Š'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Blame successfully closedðŸ˜Š\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"Path\": \"GitBlameGame/BlameSight/Backend/BlameSightBackend/BlameSightBackend/Utils/JWTUtils.cs\",\r\n  \"Comment\": \"Why tab spaces?\",\r\n  \"Urgency\" : 2,\r\n  \"lineNum\" : 3,\r\n  \"branch\" : \"main\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{AWSURL}}/api/Blames/blameBegone/{{savedId}}",
					"host": [
						"{{AWSURL}}"
					],
					"path": [
						"api",
						"Blames",
						"blameBegone",
						"{{savedId}}"
					]
				}
			},
			"response": []
		}
	]
}